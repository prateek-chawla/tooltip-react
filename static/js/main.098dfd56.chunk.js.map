{"version":3,"sources":["components/UI/Tooltip/Tooltip.js","components/Layout/Layout.js","App.js","serviceWorker.js","index.js"],"names":["Tooltip","props","classList","position","join","className","Layout","useState","setPosition","value","onChange","event","target","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"4RAoBeA,G,MAhBC,SAAAC,GAGZ,IAAMC,EAAY,CAAC,UAAWD,EAAME,UAAUC,KAAK,KAEnD,OAEF,yBAAKC,UAAWH,GAEf,yBAAKG,UAAU,kBAAf,eAEA,yBAAKA,UAAU,iBAAf,aCsBYC,G,MA/BA,SAAAL,GAAU,IAAD,EACSM,mBAAS,OADlB,mBAChBJ,EADgB,KACNK,EADM,KAQvB,OACO,yBAAKH,UAAU,UAGX,yBAAKA,UAAU,oBACvB,wDACA,4BAAQI,MAAON,EAAUO,SAVE,SAAAC,GAC7BH,EAAYG,EAAMC,OAAOH,SAWtB,4BAAQA,MAAM,OAAd,OACA,4BAAQA,MAAM,UAAd,UACA,4BAAQA,MAAM,SAAd,SACA,4BAAQA,MAAM,QAAd,UAMO,kBAAC,EAAD,CAASN,SAAUA,O,MCtBhBU,MAJf,WACC,OAAO,kBAAC,EAAD,OCMYC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.098dfd56.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nimport \"./Tooltip.css\";\r\n\r\nconst Tooltip = props => {\r\n\r\n    // Recieves Position in props and adds it to ClassList\r\n    const classList = [\"Tooltip\", props.position].join(\" \");\r\n\r\n    return (\r\n        // Tooltip container\r\n\t\t<div className={classList}>\r\n            {/* Tooltip Button */}\r\n\t\t\t<div className=\"Tooltip__Front\">Upload File</div>\r\n            {/* Tooltip Content */}\r\n\t\t\t<div className=\"Tooltip__Back\">&lt; 25MB</div>\r\n\t\t</div>\r\n\t);\r\n};\r\n\r\nexport default Tooltip;\r\n","import React, { useState } from \"react\";\r\n\r\nimport Tooltip from \"../UI/Tooltip/Tooltip\";\r\n\r\nimport \"./Layout.css\";\r\n\r\nconst Layout = props => {\r\n\tconst [position, setPosition] = useState(\"top\");\r\n\r\n    // Set position state as the value selected in dropdown\r\n\tconst positionChangeHandler = event => {\r\n\t\tsetPosition(event.target.value);\r\n\t};\r\n\r\n\treturn (\r\n        <div className=\"Layout\">\r\n\r\n            {/* Position Selection Dropdown */}\r\n            <div className='PositionDropdown'>\r\n\t\t\t\t<label>Pick Tooltip Position</label>\r\n\t\t\t\t<select value={position} onChange={positionChangeHandler}>\r\n                    \r\n\t\t\t\t\t<option value=\"top\">Top</option>\r\n\t\t\t\t\t<option value=\"bottom\">Bottom</option>\r\n\t\t\t\t\t<option value=\"right\">Right</option>\r\n\t\t\t\t\t<option value=\"left\">Left</option>\r\n                    \r\n\t\t\t\t</select>\r\n\t\t\t</div>\r\n\r\n            {/* Pass Position to Tooltip as props */}\r\n            <Tooltip position={position} />\r\n\r\n\t\t</div>\r\n\t);\r\n};\r\n\r\nexport default Layout;\r\n","import React from \"react\";\n\nimport Layout from \"./components/Layout/Layout\";\nimport \"./App.css\";\n\nfunction App() {\n\treturn <Layout />;\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}